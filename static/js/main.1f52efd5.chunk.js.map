{"version":3,"sources":["components/PageNavLink/PageNavLink.tsx","App.tsx","pages/HomePage.tsx","components/Loader/Loader.tsx","api.ts","components/TodosTable/TodosTable.tsx","pages/TodosPages.tsx","pages/NotFoundPage.tsx","index.tsx"],"names":["PageNavLink","to","text","className","isActive","classNames","App","role","HomePage","Loader","API_URL","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","TodosTable","selectedPersonSlug","useState","people","setPeople","isLoadingPerson","setIsLoadingPerson","isHasError","setIsHasError","isSelected","person","slug","personParents","personParent","find","v","name","useEffect","todosData","length","map","isMotherName","motherName","isFatherName","fatherName","sex","born","died","TodosPage","useParams","NotFoundPage","createRoot","document","getElementById","render","path","element","index","replace"],"mappings":"6PASaA,EAAyB,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACpC,cAAC,IAAD,CACEC,UAAW,gBAAGC,EAAH,EAAGA,SAAH,OAAkBC,IAC3B,cACA,CAAE,8BAA+BD,GAFxB,EAIXH,GAAIA,EALN,SAOGC,GARiC,ECJzBI,G,MAAM,kBACjB,sBAAK,UAAQ,MAAb,UACE,qBACE,UAAQ,MACRH,UAAU,iCACVI,KAAK,aACL,aAAW,kBAJb,SAME,qBAAKJ,UAAU,YAAf,SACE,sBAAKA,UAAU,eAAf,UACE,cAAC,EAAD,CAAaF,GAAG,IAAIC,KAAK,SAEzB,cAAC,EAAD,CAAaD,GAAG,UAAUC,KAAK,kBAKrC,sBAAMC,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,cAAC,IAAD,UAnBW,GCLNK,EAAW,kBACtB,oBAAIL,UAAU,QAAd,sBADsB,E,6BCEXM,G,MAAS,kBACpB,qBAAKN,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,qBAFG,GCChBO,EAAU,oEAMT,SAASC,IAEd,OANYC,EAMA,IALL,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,EAAxB,KAMvBI,MAAK,kBAAMC,MAAMP,EAAZ,IACLM,MAAK,SAAAE,GAAQ,OAAIA,EAASC,MAAb,IARlB,IAAcP,CASb,CCFM,IAAMQ,EAAwB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,mBACtC,EAA4BC,mBAAmB,IAA/C,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA8CF,oBAAS,GAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAAoCJ,oBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAEMC,EAAa,SAACC,GAAD,OAAoBA,EAAOC,OAASV,CAApC,EAEbW,EAAgB,SAACC,GACrB,OAAOV,EAAOW,MAAK,SAAAC,GAAC,OAAIF,IAAiBE,EAAEC,IAAvB,GACrB,EAiBD,OAfAC,qBAAU,WACR,gCAAC,8GAEGX,GAAmB,GAFtB,SAG2Bf,IAH3B,OAGS2B,EAHT,OAKGd,EAAUc,GALb,gDAOGV,GAAc,GAPjB,yBASGF,GAAmB,GATtB,2EAAD,EAYD,GAAE,IAGD,qBAAKvB,UAAU,QAAf,SACE,sBAAKA,UAAU,sBAAf,UACGsB,GAAmB,cAAC,EAAD,IAEnBE,GACC,mBAAG,UAAQ,qBAAqBxB,UAAU,kBAA1C,mCAKAsB,IAAoBF,EAAOgB,QAC3B,mBAAG,UAAQ,kBAAX,gDAKAd,GAAmBF,EAAOgB,QAC1B,wBACE,UAAQ,cACRpC,UAAU,uDAFZ,UAIE,gCACE,+BACE,sCACA,qCACA,sCACA,sCACA,wCACA,6CAIJ,gCACGoB,EAAOiB,KAAI,SAAAV,GAAW,IAAD,IACdW,EAAeX,EAAOY,YAAc,IACpCC,EAAeb,EAAOc,YAAc,IAE1C,OACE,qBACE,UAAQ,SAERzC,UAAWE,IACT,CAAE,yBAA0BwB,EAAWC,KAJ3C,UAOE,6BACE,cAAC,IAAD,CACE7B,GAAE,aAAQ6B,EAAOC,MACjB5B,UAAWE,IACT,CAAE,kBAAkC,MAAfyB,EAAOe,MAHhC,SAMGf,EAAOM,SAIZ,6BAAKN,EAAOe,MACZ,6BAAKf,EAAOgB,OACZ,6BAAKhB,EAAOiB,OACZ,6BACGjB,EAAOY,YAAcV,EAAcF,EAAOY,YAEvC,cAAC,IAAD,CACEzC,GAAE,uBAAQ+B,EAAcF,EAAOY,mBAA7B,aAAQ,EAAkCX,MAC5C5B,UAAU,kBAFZ,SAIG2B,EAAOY,aAERD,IAGR,6BACGX,EAAOc,YAAcZ,EAAcF,EAAOc,YAEvC,cAAC,IAAD,CAAM3C,GAAE,uBAAQ+B,EAAcF,EAAOc,mBAA7B,aAAQ,EAAkCb,MAAlD,SACGD,EAAOc,aAERD,MAvCV,UAEUb,EAAOM,MAyCpB,aAOd,EC5HYY,EAAY,WACvB,MAAsBC,cAAdlB,YAAR,MAAe,GAAf,EAEA,OACE,qCACE,oBAAI5B,UAAU,QAAd,yBAEA,cAAC,EAAD,CAAYkB,mBAAoBU,MAGrC,ECbYmB,EAAe,kBAC1B,oBAAI/C,UAAU,QAAd,2BAD0B,ECc5BgD,qBAAWC,SAASC,eAAe,SAChCC,OACC,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,EAAD,IAAzB,UACE,cAAC,IAAD,CAAOC,OAAK,EAACD,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOD,KAAK,OAAOC,QAAS,cAAC,IAAD,CAAUvD,GAAG,IAAIyD,SAAO,MAEpD,eAAC,IAAD,CAAOH,KAAK,SAAZ,UACE,cAAC,IAAD,CAAOE,OAAK,EAACD,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,cAAC,EAAD,SAG/B,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,cAAC,EAAD,a","file":"static/js/main.1f52efd5.chunk.js","sourcesContent":["import { FC } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\ntype Props = {\n  to: string;\n  text: string;\n};\n\nexport const PageNavLink: FC<Props> = ({ to, text }) => (\n  <NavLink\n    className={({ isActive }) => classNames(\n      'navbar-item',\n      { 'has-background-grey-lighter': isActive },\n    )}\n    to={to}\n  >\n    {text}\n  </NavLink>\n);\n","import { Outlet } from 'react-router-dom';\nimport { PageNavLink } from './components/PageNavLink/PageNavLink';\n\nimport './App.scss';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <PageNavLink to=\"/\" text=\"Home\" />\n\n          <PageNavLink to=\"/people\" text=\"People\" />\n        </div>\n      </div>\n    </nav>\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useState, useEffect, FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport { Loader } from '../Loader';\nimport { Person } from '../../types';\nimport { getPeople } from '../../api';\n\ntype Props = {\n  selectedPersonSlug: string;\n};\n\nexport const TodosTable: FC<Props> = ({ selectedPersonSlug }) => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoadingPerson, setIsLoadingPerson] = useState(false);\n  const [isHasError, setIsHasError] = useState(false);\n\n  const isSelected = (person: Person) => person.slug === selectedPersonSlug;\n\n  const personParents = (personParent: string) => {\n    return people.find(v => personParent === v.name);\n  };\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setIsLoadingPerson(true);\n        const todosData = await getPeople();\n\n        setPeople(todosData);\n      } catch (error) {\n        setIsHasError(true);\n      } finally {\n        setIsLoadingPerson(false);\n      }\n    })();\n  }, []);\n\n  return (\n    <div className=\"block\">\n      <div className=\"box table-container\">\n        {isLoadingPerson && <Loader />}\n\n        {isHasError && (\n          <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n            Something went wrong\n          </p>\n        )}\n\n        {!isLoadingPerson && !people.length && (\n          <p data-cy=\"noPeopleMessage\">\n            There are no people on the server\n          </p>\n        )}\n\n        {!isLoadingPerson && people.length && (\n          <table\n            data-cy=\"peopleTable\"\n            className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n          >\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Sex</th>\n                <th>Born</th>\n                <th>Died</th>\n                <th>Mother</th>\n                <th>Father</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {people.map(person => {\n                const isMotherName = person.motherName || '-';\n                const isFatherName = person.fatherName || '-';\n\n                return (\n                  <tr\n                    data-cy=\"person\"\n                    key={`${person.name}`}\n                    className={classNames(\n                      { 'has-background-warning': isSelected(person) },\n                    )}\n                  >\n                    <td>\n                      <Link\n                        to={`../${person.slug}`}\n                        className={classNames(\n                          { 'has-text-danger': person.sex === 'f' },\n                        )}\n                      >\n                        {person.name}\n                      </Link>\n                    </td>\n\n                    <td>{person.sex}</td>\n                    <td>{person.born}</td>\n                    <td>{person.died}</td>\n                    <td>\n                      {person.motherName && personParents(person.motherName)\n                        ? (\n                          <Link\n                            to={`../${personParents(person.motherName)?.slug}`}\n                            className=\"has-text-danger\"\n                          >\n                            {person.motherName}\n                          </Link>\n                        ) : isMotherName}\n                    </td>\n\n                    <td>\n                      {person.fatherName && personParents(person.fatherName)\n                        ? (\n                          <Link to={`../${personParents(person.fatherName)?.slug}`}>\n                            {person.fatherName}\n                          </Link>\n                        ) : isFatherName}\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { useParams } from 'react-router-dom';\nimport { TodosTable } from '../components/TodosTable/TodosTable';\n\nexport const TodosPage = () => {\n  const { slug = '' } = useParams();\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <TodosTable selectedPersonSlug={slug} />\n    </>\n  );\n};\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import { createRoot } from 'react-dom/client';\nimport {\n  HashRouter as Router,\n  Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { HomePage, TodosPage, NotFoundPage } from './pages';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n\n          <Route path=\"people\">\n            <Route index element={<TodosPage />} />\n            <Route path=\":slug\" element={<TodosPage />} />\n          </Route>\n\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Route>\n      </Routes>\n    </Router>,\n  );\n"],"sourceRoot":""}